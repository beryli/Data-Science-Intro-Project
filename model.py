# -*- coding: utf-8 -*-
"""final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XsbU3XNuKrnMDi21xj8V_5axdg4mb-9m
"""

import pandas as pd
data = pd.read_csv("data.csv")
data.drop('1Name', axis=1, inplace=True)
#print(data[1:])
from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
data_le = pd.DataFrame(data)
data_le['1Brand'] = labelencoder.fit_transform(data_le['1Brand'])
data_le

from sklearn.preprocessing import OneHotEncoder
onehotencoder = OneHotEncoder(categorical_features = [0])
data_str_ohe=onehotencoder.fit_transform(data_le).toarray()
pd.DataFrame(data_str_ohe)

X = data_str_ohe[:, :-1].astype(float)
y = data_str_ohe[:, -1].astype(float)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
print(scaler.fit(X))
normalized_data = scaler.transform(X)
print(normalized_data)

import sklearn
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import cross_val_score
regressor = RandomForestRegressor(n_estimators=200, max_depth=12, random_state=41)
regressor.fit(X_train, y_train)

from sklearn.metrics import r2_score
y_pred = regressor.predict(X_test)
score = r2_score(y_test, y_pred)
print(score)

output = open('output(forest).csv', 'w')
c = []
c.append(['prediction', 'test'])
for p, t in zip(y_pred, y_test):
  c.append([p, t])
  #output.write(str(p) + '\t' + str(t) + '\n')
c= pd.DataFrame(c)
c.to_csv(output)

import numpy as np
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import GradientBoostingRegressor
regr_1 = GradientBoostingRegressor(n_estimators=800, learning_rate=0.2,
       max_depth=3, random_state=41)
#regr_1 = GradientBoostingRegressor(DecisionTreeRegressor(max_depth=12, min_samples_leaf=2),
#                          n_estimators=50, random_state=41)

regr_1.fit(X_train, y_train)

y_1 = regr_1.predict(X_test)

score = r2_score(y_test, y_1)
print(score)

output = open('output(boosting).csv', 'w')
c = []
c.append(['prediction', 'test'])
for p, t in zip(y_1, y_test):
  c.append([p, t])
  #output.write(str(p) + '\t' + str(t) + '\n')
c= pd.DataFrame(c)
c.to_csv(output)
